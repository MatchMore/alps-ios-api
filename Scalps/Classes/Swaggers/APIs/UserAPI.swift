//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UserAPI: APIBase {
    /**
     Create device for a user
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter device: (body) The device to be created for the user.  
     - parameter limit: (query) How many items to return at one time (1-100, default 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDevice(userId: String, device: Device, limit: Int32? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        createDeviceWithRequestBuilder(userId: userId, device: device, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create device for a user
     - POST /users/{userId}/devices
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "deviceId" : "aeiou",
  "platform" : "aeiou",
  "deviceToken" : "aeiou"
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter device: (body) The device to be created for the user.  
     - parameter limit: (query) How many items to return at one time (1-100, default 100) (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func createDeviceWithRequestBuilder(userId: String, device: Device, limit: Int32? = nil) -> RequestBuilder<Device> {
        var path = "/users/{userId}/devices"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path
        let parameters = device.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Device>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a new location for a user device
     
     - parameter userId: (path) The id (UUID) of the user to create a device location for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter location: (body) Location to create for a device.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLocation(userId: String, deviceId: String, location: DeviceLocation, completion: @escaping ((_ data: DeviceLocation?,_ error: Error?) -> Void)) {
        createLocationWithRequestBuilder(userId: userId, deviceId: deviceId, location: location).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new location for a user device
     - POST /users/{userId}/devices/{deviceId}/locations
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example={
  "altitude" : 1.3579000000000001069366817318950779736042022705078125,
  "verticalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "horizontalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
  "deviceId" : "aeiou",
  "timestamp" : 123456789,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device location for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter location: (body) Location to create for a device.  

     - returns: RequestBuilder<DeviceLocation> 
     */
    open class func createLocationWithRequestBuilder(userId: String, deviceId: String, location: DeviceLocation) -> RequestBuilder<DeviceLocation> {
        var path = "/users/{userId}/devices/{deviceId}/locations"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path
        let parameters = location.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceLocation>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a publication for a device for a user
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publication: (body) Publication to create on a device.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPublication(userId: String, deviceId: String, publication: Publication, completion: @escaping ((_ data: Publication?,_ error: Error?) -> Void)) {
        createPublicationWithRequestBuilder(userId: userId, deviceId: deviceId, publication: publication).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a publication for a device for a user
     - POST /users/{userId}/devices/{deviceId}/publications
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.3579000000000001069366817318950779736042022705078125,
  "op" : "aeiou",
  "payload" : { },
  "topic" : "aeiou",
  "range" : 1.3579000000000001069366817318950779736042022705078125,
  "location" : {
    "altitude" : 1.3579000000000001069366817318950779736042022705078125,
    "verticalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "horizontalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
    "deviceId" : "aeiou",
    "timestamp" : 123456789,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  },
  "publicationId" : "aeiou",
  "deviceId" : "aeiou",
  "timestamp" : 123456789
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publication: (body) Publication to create on a device.  

     - returns: RequestBuilder<Publication> 
     */
    open class func createPublicationWithRequestBuilder(userId: String, deviceId: String, publication: Publication) -> RequestBuilder<Publication> {
        var path = "/users/{userId}/devices/{deviceId}/publications"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path
        let parameters = publication.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Publication>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a subscription for a device for a user
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscription: (body) Subscription to create on a device.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSubscription(userId: String, deviceId: String, subscription: Subscription, completion: @escaping ((_ data: Subscription?,_ error: Error?) -> Void)) {
        createSubscriptionWithRequestBuilder(userId: userId, deviceId: deviceId, subscription: subscription).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a subscription for a device for a user
     - POST /users/{userId}/devices/{deviceId}/subscriptions
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.3579000000000001069366817318950779736042022705078125,
  "op" : "aeiou",
  "topic" : "aeiou",
  "range" : 1.3579000000000001069366817318950779736042022705078125,
  "selector" : "aeiou",
  "location" : {
    "altitude" : 1.3579000000000001069366817318950779736042022705078125,
    "verticalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "horizontalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
    "deviceId" : "aeiou",
    "timestamp" : 123456789,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  },
  "subscriptionId" : "aeiou",
  "deviceId" : "aeiou",
  "timestamp" : 123456789
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscription: (body) Subscription to create on a device.  

     - returns: RequestBuilder<Subscription> 
     */
    open class func createSubscriptionWithRequestBuilder(userId: String, deviceId: String, subscription: Subscription) -> RequestBuilder<Subscription> {
        var path = "/users/{userId}/devices/{deviceId}/subscriptions"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path
        let parameters = subscription.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscription>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Info about a device of a user
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevice(userId: String, deviceId: String, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getDeviceWithRequestBuilder(userId: userId, deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a device of a user
     - GET /users/{userId}/devices/{deviceId}
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example={
  "name" : "aeiou",
  "deviceId" : "aeiou",
  "platform" : "aeiou",
  "deviceToken" : "aeiou"
}}]
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 

     - returns: RequestBuilder<Device> 
     */
    open class func getDeviceWithRequestBuilder(userId: String, deviceId: String) -> RequestBuilder<Device> {
        var path = "/users/{userId}/devices/{deviceId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Device>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Info about a user
     
     - parameter userId: (path) The id (UUID) of the user to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showUserById(userId: String, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        showUserByIdWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a user
     - GET /users/{userId}
     - API Key:
       - type: apiKey dev-key 
       - name: dev-key
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The id (UUID) of the user to retrieve 

     - returns: RequestBuilder<Users> 
     */
    open class func showUserByIdWithRequestBuilder(userId: String) -> RequestBuilder<Users> {
        var path = "/users/{userId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Users>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
