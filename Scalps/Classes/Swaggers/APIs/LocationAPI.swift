//
// LocationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class LocationAPI: APIBase {
    /**
     Create a new location for a user device
     
     - parameter userId: (path) The id (UUID) of the user to create a device location for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter location: (body) Location to create for a device.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLocation(userId: String, deviceId: String, location: DeviceLocation, completion: @escaping ((_ data: DeviceLocation?,_ error: Error?) -> Void)) {
        createLocationWithRequestBuilder(userId: userId, deviceId: deviceId, location: location).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new location for a user device
     - POST /users/{userId}/devices/{deviceId}/locations
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "altitude" : 1.3579000000000001069366817318950779736042022705078125,
  "verticalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "horizontalAccuracy" : 1.3579000000000001069366817318950779736042022705078125,
  "deviceId" : "aeiou",
  "timestamp" : 123456789,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device location for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter location: (body) Location to create for a device.  

     - returns: RequestBuilder<DeviceLocation> 
     */
    open class func createLocationWithRequestBuilder(userId: String, deviceId: String, location: DeviceLocation) -> RequestBuilder<DeviceLocation> {
        var path = "/users/{userId}/devices/{deviceId}/locations"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = ScalpsAPI.basePath + path
        let parameters = location.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeviceLocation>.Type = ScalpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
