{% for type in types.implementing.AutoCodable %}
	
class Encodable{{ type.name }}: NSObject, NSCoding {
    
    var {{ type.name | lowerFirstWord }}: {{ type.name }}?
    
    init({{ type.name | lowerFirstWord }}: {{ type.name }}?) {
        self.{{ type.name | lowerFirstWord }} = {{ type.name | lowerFirstWord }}
    }
    
    required init?(coder decoder: NSCoder) {
        {% for variable in type.storedVariables %}
        {% if variable.typeName.name|hasPrefix:"[" %}

        guard let encodable_{{ variable.name }} = decoder.decodeObject(forKey: "{{ variable.name }}") as? [Encodable{{ variable.typeName.name|replace:"[",""|replace:"]","" }}] else { return nil }
        let {{ variable.name }} = encodable_{{ variable.name }}.flatMap({ $0.{{ variable.typeName.name|replace:"[",""|replace:"]",""| lowerFirstWord}} })

        {% elif variable.isOptional and variable.type.implements.AutoCodable %}

        let encodable_{{ variable.name }} = decoder.decodeObject(forKey: "{{ variable.name }}") as? Encodable{{ variable.unwrappedTypeName }}
        let {{ variable.name }} = encodable_{{variable.name}}?.{{variable.name}}

        {% elif variable.isOptional and not variable.type.implements.AutoCodable %}
        
        let {{ variable.name }} = decoder.decodeObject(forKey: "{{ variable.name }}") as? {{ variable.unwrappedTypeName }}
        
        {% elif variable.type.implements.AutoCodable %}

        guard let encodable_{{ variable.name }} = decoder.decodeObject(forKey: "{{ variable.name }}") as? Encodable{{ variable.typeName }},
        let {{ variable.name }} = encodable_{{ variable.name }}.{{ variable.name }} else { return nil }

        {% else %}
        
        guard let {{ variable.name }} = decoder.decodeObject(forKey: "{{ variable.name }}") as? {{ variable.typeName }} else { return nil }

        {% endif %}
        
        {% endfor %}

    }      
            
    func encode(with encoder: NSCoder) {
        {% for variable in type.storedVariables %}
        {% if variable.typeName.name|hasPrefix:"[" %}
        
        let encoded_{{ variable.name }} = {{ type.name | lowerFirstWord }}?.{{ variable.name }}.map({ return Encodable{{ variable.typeName.name|replace:"[",""|replace:"]","" }}({{ variable.typeName.name|replace:"[",""|replace:"]",""| lowerFirstWord }}: $0) })
        encoder.encode(encoded_{{ variable.name }}, forKey: "{{ variable.name }}")

        {% elif variable.type.implements.AutoCodable %}
        
        encoder.encode(Encodable{{ variable.unwrappedTypeName }}({{ variable.name | lowerFirstWord }}: {{ type.name | lowerFirstWord }}?.{{ variable.name }}), forKey: "{{ variable.name }}")
        
        {% else %}
        
        encoder.encode({{ type.name | lowerFirstWord }}?.{{ variable.name }}, forKey: "{{ variable.name }}")
        
        {% endif %}
        {% endfor %}
    }
}

{% endfor %}