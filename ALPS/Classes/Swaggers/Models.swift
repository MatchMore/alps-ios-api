// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [APIError]
        Decoders.addDecoder(clazz: [APIError].self) { (source: AnyObject) -> [APIError] in
            return Decoders.decode(clazz: [APIError].self, source: source)
        }
        // Decoder for APIError
        Decoders.addDecoder(clazz: APIError.self) { (source: AnyObject) -> APIError in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = APIError()
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return instance
        }


        // Decoder for [Device]
        Decoders.addDecoder(clazz: [Device].self) { (source: AnyObject) -> [Device] in
            return Decoders.decode(clazz: [Device].self, source: source)
        }
        // Decoder for Device
        Decoders.addDecoder(clazz: Device.self) { (source: AnyObject) -> Device in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Device()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.platform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["platform"] as AnyObject?)
            instance.deviceToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceToken"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"] as AnyObject?)
            return instance
        }


        // Decoder for [DeviceLocation]
        Decoders.addDecoder(clazz: [DeviceLocation].self) { (source: AnyObject) -> [DeviceLocation] in
            return Decoders.decode(clazz: [DeviceLocation].self, source: source)
        }
        // Decoder for DeviceLocation
        Decoders.addDecoder(clazz: DeviceLocation.self) { (source: AnyObject) -> DeviceLocation in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeviceLocation()
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"] as AnyObject?)
            return instance
        }


        // Decoder for [Location]
        Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
            return Decoders.decode(clazz: [Location].self, source: source)
        }
        // Decoder for Location
        Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Location()
            instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"] as AnyObject?)
            instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"] as AnyObject?)
            instance.altitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["altitude"] as AnyObject?)
            instance.horizontalAccuracy = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["horizontalAccuracy"] as AnyObject?)
            instance.verticalAccuracy = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["verticalAccuracy"] as AnyObject?)
            return instance
        }


        // Decoder for [Match]
        Decoders.addDecoder(clazz: [Match].self) { (source: AnyObject) -> [Match] in
            return Decoders.decode(clazz: [Match].self, source: source)
        }
        // Decoder for Match
        Decoders.addDecoder(clazz: Match.self) { (source: AnyObject) -> Match in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Match()
            instance.matchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["matchId"] as AnyObject?)
            instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            instance.publication = Decoders.decodeOptional(clazz: Publication.self, source: sourceDictionary["publication"] as AnyObject?)
            instance.subscription = Decoders.decodeOptional(clazz: Subscription.self, source: sourceDictionary["subscription"] as AnyObject?)
            return instance
        }


        // Decoder for [Matches]
        Decoders.addDecoder(clazz: [Matches].self) { (source: AnyObject) -> [Matches] in
            return Decoders.decode(clazz: [Matches].self, source: source)
        }
        // Decoder for Matches
        Decoders.addDecoder(clazz: Matches.self) { (source: AnyObject) -> Matches in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: Match.self, source: $0) })
        }


        // Decoder for [Publication]
        Decoders.addDecoder(clazz: [Publication].self) { (source: AnyObject) -> [Publication] in
            return Decoders.decode(clazz: [Publication].self, source: source)
        }
        // Decoder for Publication
        Decoders.addDecoder(clazz: Publication.self) { (source: AnyObject) -> Publication in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Publication()
            instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            instance.publicationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["publicationId"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.topic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topic"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"] as AnyObject?)
            instance.range = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["range"] as AnyObject?)
            instance.duration = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["duration"] as AnyObject?)
            instance.properties = Decoders.decodeOptional(clazz: Properties.self, source: sourceDictionary["properties"] as AnyObject?)
            instance.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            return instance
        }


        // Decoder for [Publications]
        Decoders.addDecoder(clazz: [Publications].self) { (source: AnyObject) -> [Publications] in
            return Decoders.decode(clazz: [Publications].self, source: source)
        }
        // Decoder for Publications
        Decoders.addDecoder(clazz: Publications.self) { (source: AnyObject) -> Publications in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: Publication.self, source: $0) })
        }


        // Decoder for [Subscription]
        Decoders.addDecoder(clazz: [Subscription].self) { (source: AnyObject) -> [Subscription] in
            return Decoders.decode(clazz: [Subscription].self, source: source)
        }
        // Decoder for Subscription
        Decoders.addDecoder(clazz: Subscription.self) { (source: AnyObject) -> Subscription in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Subscription()
            instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"] as AnyObject?)
            instance.subscriptionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionId"] as AnyObject?)
            instance.deviceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceId"] as AnyObject?)
            instance.topic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topic"] as AnyObject?)
            instance.selector = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selector"] as AnyObject?)
            instance.location = Decoders.decodeOptional(clazz: Location.self, source: sourceDictionary["location"] as AnyObject?)
            instance.range = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["range"] as AnyObject?)
            instance.duration = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["duration"] as AnyObject?)
            instance.op = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["op"] as AnyObject?)
            return instance
        }


        // Decoder for [Subscriptions]
        Decoders.addDecoder(clazz: [Subscriptions].self) { (source: AnyObject) -> [Subscriptions] in
            return Decoders.decode(clazz: [Subscriptions].self, source: source)
        }
        // Decoder for Subscriptions
        Decoders.addDecoder(clazz: Subscriptions.self) { (source: AnyObject) -> Subscriptions in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: Subscription.self, source: $0) })
        }


        // Decoder for [User]
        Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
            return Decoders.decode(clazz: [User].self, source: source)
        }
        // Decoder for User
        Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = User()
            instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Users]
        Decoders.addDecoder(clazz: [Users].self) { (source: AnyObject) -> [Users] in
            return Decoders.decode(clazz: [Users].self, source: source)
        }
        // Decoder for Users
        Decoders.addDecoder(clazz: Users.self) { (source: AnyObject) -> Users in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: User.self, source: $0) })
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
