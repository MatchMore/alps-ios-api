//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI: APIBase {
    /**
     Create device for a user
     
     - parameter userId: (path) The id (UUID) of the user for which to create a device 
     - parameter device: (body) The device that has to be create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDevice(userId: String, device: Device, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        createDeviceWithRequestBuilder(userId: userId, device: device).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create device for a user
     - POST /users/{userId}/devices
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "deviceType" : { },
  "name" : "aeiou",
  "deviceId" : "aeiou"
}}]
     
     - parameter userId: (path) The id (UUID) of the user for which to create a device 
     - parameter device: (body) The device that has to be create 

     - returns: RequestBuilder<Device> 
     */
    open class func createDeviceWithRequestBuilder(userId: String, device: Device) -> RequestBuilder<Device> {
        var path = "/users/{userId}/devices"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters = device.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new location for a device
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 
     - parameter location: (body) The location that has to be create  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLocation(userId: String, deviceId: String, location: Location, completion: @escaping ((_ data: DeviceLocation?,_ error: Error?) -> Void)) {
        createLocationWithRequestBuilder(userId: userId, deviceId: deviceId, location: location).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new location for a device
     - POST /users/{userId}/devices/{deviceId}/locations
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "location" : {
    "altitude" : 5.962133916683182,
    "verticalAccuracy" : 2.3021358869347655,
    "latitude" : 6.027456183070403,
    "horizontalAccuracy" : 5.637376656633329,
    "timestamp" : 0,
    "longitude" : 1.4658129805029452
  },
  "deviceId" : "aeiou"
}}]
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 
     - parameter location: (body) The location that has to be create  

     - returns: RequestBuilder<DeviceLocation> 
     */
    open class func createLocationWithRequestBuilder(userId: String, deviceId: String, location: Location) -> RequestBuilder<DeviceLocation> {
        var path = "/users/{userId}/devices/{deviceId}/locations"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters = location.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DeviceLocation>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a publication for a device for a user
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publication: (body) The publication that has to be create  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPublication(userId: String, deviceId: String, publication: Publication, completion: @escaping ((_ data: Publication?,_ error: Error?) -> Void)) {
        createPublicationWithRequestBuilder(userId: userId, deviceId: deviceId, publication: publication).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a publication for a device for a user
     - POST /users/{userId}/devices/{deviceId}/publications
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.4658129805029452,
  "op" : "aeiou",
  "topic" : "aeiou",
  "range" : 6.027456183070403,
  "publicationId" : "aeiou",
  "deviceId" : "aeiou",
  "properties" : "aeiou",
  "timestamp" : 0
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device for 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publication: (body) The publication that has to be create  

     - returns: RequestBuilder<Publication> 
     */
    open class func createPublicationWithRequestBuilder(userId: String, deviceId: String, publication: Publication) -> RequestBuilder<Publication> {
        var path = "/users/{userId}/devices/{deviceId}/publications"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters = publication.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publication>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a subscription for a device for a user
     
     - parameter userId: (path) The id (UUID) of the user to create a device for  
     - parameter deviceId: (path) The id (UUID) of the user device  
     - parameter subscription: (body) The subscription that has to be create  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSubscription(userId: String, deviceId: String, subscription: Subscription, completion: @escaping ((_ data: Subscription?,_ error: Error?) -> Void)) {
        createSubscriptionWithRequestBuilder(userId: userId, deviceId: deviceId, subscription: subscription).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a subscription for a device for a user
     - POST /users/{userId}/devices/{deviceId}/subscriptions
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.4658129805029452,
  "op" : "aeiou",
  "topic" : "aeiou",
  "range" : 6.027456183070403,
  "selector" : "aeiou",
  "subscriptionId" : "aeiou",
  "deviceId" : "aeiou",
  "timestamp" : 0
}}]
     
     - parameter userId: (path) The id (UUID) of the user to create a device for  
     - parameter deviceId: (path) The id (UUID) of the user device  
     - parameter subscription: (body) The subscription that has to be create  

     - returns: RequestBuilder<Subscription> 
     */
    open class func createSubscriptionWithRequestBuilder(userId: String, deviceId: String, subscription: Subscription) -> RequestBuilder<Subscription> {
        var path = "/users/{userId}/devices/{deviceId}/subscriptions"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters = subscription.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscription>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Publication
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publicationId: (path) The id (UUID) of the subscription 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePublication(userId: String, deviceId: String, publicationId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deletePublicationWithRequestBuilder(userId: userId, deviceId: deviceId, publicationId: publicationId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a Publication
     - DELETE /users/{userId}/devices/{deviceId}/publications/{publicationId}
     - 
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publicationId: (path) The id (UUID) of the subscription 

     - returns: RequestBuilder<Void> 
     */
    open class func deletePublicationWithRequestBuilder(userId: String, deviceId: String, publicationId: String) -> RequestBuilder<Void> {
        var path = "/users/{userId}/devices/{deviceId}/publications/{publicationId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{publicationId}", with: "\(publicationId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Subscription
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscriptionId: (path) The id (UUID) of the subscription 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubscription(userId: String, deviceId: String, subscriptionId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSubscriptionWithRequestBuilder(userId: userId, deviceId: deviceId, subscriptionId: subscriptionId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete a Subscription
     - DELETE /users/{userId}/devices/{deviceId}/subscriptions/{subscriptionId}
     - 
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscriptionId: (path) The id (UUID) of the subscription 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubscriptionWithRequestBuilder(userId: String, deviceId: String, subscriptionId: String) -> RequestBuilder<Void> {
        var path = "/users/{userId}/devices/{deviceId}/subscriptions/{subscriptionId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{subscriptionId}", with: "\(subscriptionId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Info about a device of a user
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevice(userId: String, deviceId: String, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getDeviceWithRequestBuilder(userId: userId, deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a device of a user
     - GET /users/{userId}/devices/{deviceId}
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "deviceType" : { },
  "name" : "aeiou",
  "deviceId" : "aeiou"
}}]
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 

     - returns: RequestBuilder<Device> 
     */
    open class func getDeviceWithRequestBuilder(userId: String, deviceId: String) -> RequestBuilder<Device> {
        var path = "/users/{userId}/devices/{deviceId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all devices for a user
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevices(userId: String, completion: @escaping ((_ data: Devices?,_ error: Error?) -> Void)) {
        getDevicesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all devices for a user
     - GET /users/{userId}/devices
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The id (UUID) of the user of the device 

     - returns: RequestBuilder<Devices> 
     */
    open class func getDevicesWithRequestBuilder(userId: String) -> RequestBuilder<Devices> {
        var path = "/users/{userId}/devices"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Devices>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Info about a publication on a device of a user
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publicationId: (path) The id (UUID) of the publication 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublication(userId: String, deviceId: String, publicationId: String, completion: @escaping ((_ data: Publication?,_ error: Error?) -> Void)) {
        getPublicationWithRequestBuilder(userId: userId, deviceId: deviceId, publicationId: publicationId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a publication on a device of a user
     - GET /users/{userId}/devices/{deviceId}/publications/{publicationId}
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.4658129805029452,
  "op" : "aeiou",
  "topic" : "aeiou",
  "range" : 6.027456183070403,
  "publicationId" : "aeiou",
  "deviceId" : "aeiou",
  "properties" : "aeiou",
  "timestamp" : 0
}}]
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter publicationId: (path) The id (UUID) of the publication 

     - returns: RequestBuilder<Publication> 
     */
    open class func getPublicationWithRequestBuilder(userId: String, deviceId: String, publicationId: String) -> RequestBuilder<Publication> {
        var path = "/users/{userId}/devices/{deviceId}/publications/{publicationId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{publicationId}", with: "\(publicationId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publication>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all publications for a device
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublications(userId: String, deviceId: String, completion: @escaping ((_ data: Publications?,_ error: Error?) -> Void)) {
        getPublicationsWithRequestBuilder(userId: userId, deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all publications for a device
     - GET /users/{userId}/devices/{deviceId}/publications
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 

     - returns: RequestBuilder<Publications> 
     */
    open class func getPublicationsWithRequestBuilder(userId: String, deviceId: String) -> RequestBuilder<Publications> {
        var path = "/users/{userId}/devices/{deviceId}/publications"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Publications>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Info about a subscription on a device of a user
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscriptionId: (path) The id (UUID) of the subscription 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscription(userId: String, deviceId: String, subscriptionId: String, completion: @escaping ((_ data: Subscription?,_ error: Error?) -> Void)) {
        getSubscriptionWithRequestBuilder(userId: userId, deviceId: deviceId, subscriptionId: subscriptionId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a subscription on a device of a user
     - GET /users/{userId}/devices/{deviceId}/subscriptions/{subscriptionId}
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example={
  "duration" : 1.4658129805029452,
  "op" : "aeiou",
  "topic" : "aeiou",
  "range" : 6.027456183070403,
  "selector" : "aeiou",
  "subscriptionId" : "aeiou",
  "deviceId" : "aeiou",
  "timestamp" : 0
}}]
     
     - parameter userId: (path) The id (UUID) of the user of the device 
     - parameter deviceId: (path) The id (UUID) of the user device 
     - parameter subscriptionId: (path) The id (UUID) of the subscription 

     - returns: RequestBuilder<Subscription> 
     */
    open class func getSubscriptionWithRequestBuilder(userId: String, deviceId: String, subscriptionId: String) -> RequestBuilder<Subscription> {
        var path = "/users/{userId}/devices/{deviceId}/subscriptions/{subscriptionId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{subscriptionId}", with: "\(subscriptionId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscription>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all subscriptions for a device
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscriptions(userId: String, deviceId: String, completion: @escaping ((_ data: Subscriptions?,_ error: Error?) -> Void)) {
        getSubscriptionsWithRequestBuilder(userId: userId, deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all subscriptions for a device
     - GET /users/{userId}/devices/{deviceId}/subscriptions
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The id (UUID) of the user 
     - parameter deviceId: (path) The id (UUID) of the device 

     - returns: RequestBuilder<Subscriptions> 
     */
    open class func getSubscriptionsWithRequestBuilder(userId: String, deviceId: String) -> RequestBuilder<Subscriptions> {
        var path = "/users/{userId}/devices/{deviceId}/subscriptions"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriptions>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Info about a user
     
     - parameter userId: (path) The id (UUID) of the user to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: String, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Info about a user
     - GET /users/{userId}
     - API Key:
       - type: apiKey api-key 
       - name: api-key
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The id (UUID) of the user to retrieve 

     - returns: RequestBuilder<Users> 
     */
    open class func getUserWithRequestBuilder(userId: String) -> RequestBuilder<Users> {
        var path = "/users/{userId}"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Users>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
